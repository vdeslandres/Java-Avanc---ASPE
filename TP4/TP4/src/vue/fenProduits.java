/*
TP4: Béatrice Rollet

Quel type d’exception est levée quand on n’a sélectionné aucune ligne de la table ? 
    Exception in thread "AWT-EventQueue-0" java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 1

 */
package vue;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.FileDialog;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Niakulu
 */
public class fenProduits extends javax.swing.JFrame {

    private Border redline;
    java.applet.AudioClip son1, son2;
    java.net.URL url1 = fenProduits.class.getResource("/son/726.wav");
    java.net.URL url2 = fenProduits.class.getResource("/son/727.wav");
    private final DefaultListModel disqueDur;
    private final DefaultListModel souris;
    private final DefaultListModel lecteurDVD;
    private final DefaultListModel appPhoto;
    private final DefaultListModel casqueAudio;

    /**
     * Creates new form fenProduits
     */
    public fenProduits() {

        disqueDur = new DefaultListModel();
        souris = new DefaultListModel();
        lecteurDVD = new DefaultListModel();
        appPhoto = new DefaultListModel();
        casqueAudio = new DefaultListModel();

        String[] lesAppareilsPhoto = {"Reflex", "Analogique", "Numerique"};
        int i;
        for (i = 0; i < lesAppareilsPhoto.length; i++) {
            appPhoto.addElement(lesAppareilsPhoto[i]);
        }

        String[] lesCasquesAudio = {"Casque isolant", "Casque cher", "Casque nul"};
        for (i = 0; i < lesCasquesAudio.length; i++) {
            casqueAudio.addElement(lesCasquesAudio[i]);
        }

        son1 = java.applet.Applet.newAudioClip(url1);
        son2 = java.applet.Applet.newAudioClip(url2);

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panCarac = new javax.swing.JPanel();
        libLib = new javax.swing.JLabel();
        textLib = new javax.swing.JTextField();
        libCat = new javax.swing.JLabel();
        cbCat = new javax.swing.JComboBox<>();
        libPrix = new javax.swing.JLabel();
        textPrix = new javax.swing.JTextField();
        libSousCat = new javax.swing.JLabel();
        libSousCat.setVisible(false);
        btAjoutSousCat = new javax.swing.JButton();
        textSousCat = new javax.swing.JTextField();
        btSuppSousCat = new javax.swing.JButton();
        scrollList = new javax.swing.JScrollPane();
        scrollList.setVisible(false);
        listSousCat = new javax.swing.JList<>();
        libQuant = new javax.swing.JLabel();
        textQuant = new javax.swing.JTextField();
        btSon1 = new javax.swing.JButton();
        btSon2 = new javax.swing.JButton();
        btSuppr = new javax.swing.JButton();
        btModif = new javax.swing.JButton();
        btAjout = new javax.swing.JButton();
        scrollTable = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        btAide = new javax.swing.JButton();
        btAPropos = new javax.swing.JButton();
        btAfficher = new javax.swing.JButton();
        mbMenu = new javax.swing.JMenuBar();
        mFichier = new javax.swing.JMenu();
        miExport = new javax.swing.JMenuItem();
        miQuitter = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panCarac.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Caractéristiques produits", 0, 0, new java.awt.Font("Tahoma", 2, 10))); // NOI18N

        libLib.setText("Libellé");

        libCat.setText("Catégorie");

        cbCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Disque Dur", "Souris", "LecteurDVD", "Casque Audio", "Appareil Photo" }));
        cbCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCatActionPerformed(evt);
            }
        });

        libPrix.setText("Prix");

        libSousCat.setText("Sous-catégorie");

        btAjoutSousCat.setText("Ajouter une sous-catégorie");
        btAjoutSousCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAjoutSousCatActionPerformed(evt);
            }
        });

        btSuppSousCat.setText("Supprimer une sous-catégorie");
        btSuppSousCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSuppSousCatActionPerformed(evt);
            }
        });

        listSousCat.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listSousCat.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listSousCat.setVisibleRowCount(3);
        scrollList.setViewportView(listSousCat);

        libQuant.setText("Quantité");

        javax.swing.GroupLayout panCaracLayout = new javax.swing.GroupLayout(panCarac);
        panCarac.setLayout(panCaracLayout);
        panCaracLayout.setHorizontalGroup(
            panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCaracLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panCaracLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btSuppSousCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panCaracLayout.createSequentialGroup()
                                .addComponent(btAjoutSousCat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textSousCat, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panCaracLayout.createSequentialGroup()
                        .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panCaracLayout.createSequentialGroup()
                                .addComponent(libLib)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textLib, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panCaracLayout.createSequentialGroup()
                                .addComponent(libCat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(160, 160, 160)
                                .addComponent(libSousCat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panCaracLayout.createSequentialGroup()
                                    .addComponent(libQuant)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(textQuant))
                                .addGroup(panCaracLayout.createSequentialGroup()
                                    .addComponent(libPrix)
                                    .addGap(29, 29, 29)
                                    .addComponent(textPrix, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 35, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panCaracLayout.setVerticalGroup(
            panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCaracLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(libLib)
                    .addComponent(textLib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(libCat)
                        .addComponent(cbCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(libSousCat))
                    .addComponent(scrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSousCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAjoutSousCat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSuppSousCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(libPrix)
                    .addComponent(textPrix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panCaracLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(libQuant)
                    .addComponent(textQuant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        btSon1.setText("Jouer le son 1 ");
        btSon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSon1ActionPerformed(evt);
            }
        });

        btSon2.setText("Jouer le son 2 ");
        btSon2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSon2ActionPerformed(evt);
            }
        });

        btSuppr.setText("Supprimer");
        btSuppr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btSupprMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btSupprMouseExited(evt);
            }
        });
        btSuppr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSupprActionPerformed(evt);
            }
        });

        btModif.setText("Modifier");
        btModif.setToolTipText("Pour modifier les données de la ligne sélectionnée, changez les données dans le formulaire et cliquez sur 'Modifier'");
        btModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModifActionPerformed(evt);
            }
        });

        btAjout.setText("Ajouter");
        btAjout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAjoutActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Libellé", "Catégorie", "Sous-Catégorie", "Prix", "Quantité"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setOpaque(false);
        jTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                synchroniser(evt);
            }
        });
        scrollTable.setViewportView(jTable);

        jToolBar1.setBorder(null);
        jToolBar1.setRollover(true);

        btAide.setText("Aide");
        btAide.setFocusable(false);
        btAide.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btAide.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btAide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAideActionPerformed(evt);
            }
        });
        jToolBar1.add(btAide);

        btAPropos.setText("A Propos");
        btAPropos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAProposActionPerformed(evt);
            }
        });
        jToolBar1.add(btAPropos);

        btAfficher.setText("Afficher");
        btAfficher.setFocusable(false);
        btAfficher.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btAfficher.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAfficherActionPerformed(evt);
            }
        });
        jToolBar1.add(btAfficher);

        mFichier.setText("Fichier");

        miExport.setText("Export Excel");
        miExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportActionPerformed(evt);
            }
        });
        mFichier.add(miExport);

        miQuitter.setText("Quitter");
        miQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQuitterActionPerformed(evt);
            }
        });
        mFichier.add(miQuitter);

        mbMenu.add(mFichier);

        setJMenuBar(mbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollTable)
                    .addComponent(panCarac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btSon2)
                            .addComponent(btSon1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 278, Short.MAX_VALUE)
                        .addComponent(btSuppr)
                        .addGap(18, 18, 18)
                        .addComponent(btModif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btAjout)
                        .addGap(2, 2, 2)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panCarac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btSuppr)
                            .addComponent(btModif)
                            .addComponent(btAjout)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btSon1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSon2)))
                .addGap(18, 18, 18)
                .addComponent(scrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//Gestion de la Combobox en lien avec la liste
    private void cbCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCatActionPerformed

        if (cbCat.getSelectedItem().equals("Disque Dur")) {
            listSousCat.setModel(disqueDur);
            if (disqueDur.isEmpty()) {
                scrollList.setVisible(false);
                libSousCat.setVisible(false);
            } else {
                scrollList.setVisible(true);
                libSousCat.setVisible(true);
            }
        }
        if (cbCat.getSelectedItem().equals("Souris")) {
            listSousCat.setModel(souris);
            if (souris.isEmpty()) {
                scrollList.setVisible(false);
                libSousCat.setVisible(false);

            } else {
                scrollList.setVisible(true);
                listSousCat.setVisible(true);

            }
        }
        if (cbCat.getSelectedItem().equals("LecteurDVD")) {
            listSousCat.setModel(lecteurDVD);
            if (lecteurDVD.isEmpty()) {
                scrollList.setVisible(false);
                libSousCat.setVisible(false);
            } else {
                scrollList.setVisible(true);
                libSousCat.setVisible(true);
            }
        }
        if (cbCat.getSelectedItem().equals("Casque Audio")) {
            listSousCat.setModel(casqueAudio);
            if (casqueAudio.isEmpty()) {
                scrollList.setVisible(false);
                libSousCat.setVisible(false);
            } else {
                scrollList.setVisible(true);
                libSousCat.setVisible(true);

            }
        }
        if (cbCat.getSelectedItem().equals("Appareil Photo")) {
            listSousCat.setModel(appPhoto);
            if (appPhoto.isEmpty()) {
                scrollList.setVisible(false);
                libSousCat.setVisible(false);
            } else {
                scrollList.setVisible(true);
                libSousCat.setVisible(true);
            }
        }
    }//GEN-LAST:event_cbCatActionPerformed

//Bouton supprimer : une ou plusieurs lignes
    private void btSupprActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSupprActionPerformed
        int[] selectedRows = jTable.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
        if (jTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Aucune ligne n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int input = JOptionPane.showConfirmDialog(this, "Supprimer la/les ligne(s) sélectionnée(s)?", "Suppression", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (input == JOptionPane.OK_OPTION) {
                if (selectedRows.length > 0) {
                    for (int i = selectedRows.length - 1; i >= 0; i--) {
                        model.removeRow(selectedRows[i]);
                    }
                    textLib.setText("");
                    textPrix.setText("");
                    textQuant.setText("");
                    cbCat.setSelectedIndex(0);
                    textLib.setFocusable(true);
                    textLib.requestFocus();
                }
            } else if (input == JOptionPane.CANCEL_OPTION) {
                this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            }
        }
    }//GEN-LAST:event_btSupprActionPerformed

//Sous-menu Quitter
    private void miQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQuitterActionPerformed
        int input = JOptionPane.showConfirmDialog(this, "Quitter l'application ?", "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (input == JOptionPane.OK_OPTION) {
            System.out.println("Application Fermée");
            this.dispose();
            System.exit(0);
        } else if (input == JOptionPane.CANCEL_OPTION) {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_miQuitterActionPerformed

//Bouton Supprimer : Hover in
    private void btSupprMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btSupprMouseEntered
        redline = BorderFactory.createLineBorder(Color.red, 3);
        btSuppr.setBorder(redline);
    }//GEN-LAST:event_btSupprMouseEntered
//Bouton Supprimer : Hover out
    private void btSupprMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btSupprMouseExited
        btSuppr.setBorder(btModif.getBorder());
    }//GEN-LAST:event_btSupprMouseExited

//Bouton Ajouter à la table
    private void btAjoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAjoutActionPerformed
        String Lib;
        String C = "";
        String SC = "Pas de sous catégorie";
        String Px;
        String Q;

        if (cbCat.getSelectedIndex() == 0) {
            C = "Disque Dur";
            if (!disqueDur.isEmpty()) {
                if (listSousCat.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    SC = listSousCat.getSelectedValue();
                }
            }
        }
        if (cbCat.getSelectedIndex() == 1) {
            C = "Souris";
            if (!souris.isEmpty()) {
                if (listSousCat.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    SC = listSousCat.getSelectedValue();
                }
            }
        }
        if (cbCat.getSelectedIndex() == 2) {
            C = "Lecteur DVD";
            if (!lecteurDVD.isEmpty()) {
                if (listSousCat.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    SC = listSousCat.getSelectedValue();
                }
            }
        }
        if (cbCat.getSelectedIndex() == 3) {
            C = "Casque Audio";
            if (!casqueAudio.isEmpty()) {
                if (listSousCat.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    SC = listSousCat.getSelectedValue();
                };
            }
        }
        if (cbCat.getSelectedIndex() == 4) {
            C = "Appareil Photo";
            if (!appPhoto.isEmpty()) {
                if (listSousCat.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    SC = listSousCat.getSelectedValue();
                }
            }
        }
        Lib = textLib.getText();
        Px = textPrix.getText();
        Q = textQuant.getText();

        String regex = "[0-9]*";
        if (Lib.equals("")) { //libellé vide
            JOptionPane.showMessageDialog(this, "Le libellé est vide", "Erreur de saisie", JOptionPane.INFORMATION_MESSAGE);
        } else if (!Px.matches(regex) || Px.equals("")) { // si prix vide, non numérique 
            JOptionPane.showMessageDialog(this, "Le prix est vide ou erroné", "Erreur de saisie", JOptionPane.INFORMATION_MESSAGE);
        } else if (!Q.matches(regex) || Q.equals("")) { // si prix vide, non numérique 
            JOptionPane.showMessageDialog(this, "La quantité est vide ou erronée", "Erreur de saisie", JOptionPane.INFORMATION_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) jTable.getModel();
            model.addRow(new Object[]{Lib, C, SC, Px, Q});
        }
    }//GEN-LAST:event_btAjoutActionPerformed

//Bouton son1
    private void btSon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSon1ActionPerformed
        son1.play();
    }//GEN-LAST:event_btSon1ActionPerformed
//Bouton son2
    private void btSon2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSon2ActionPerformed
        son2.play();
    }//GEN-LAST:event_btSon2ActionPerformed

//Ajouter une sous-catégorie
    private void btAjoutSousCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAjoutSousCatActionPerformed
        if (textSousCat.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Entrez un nom de sous-catégorie", "Champ vide", JOptionPane.INFORMATION_MESSAGE);
        } else {
            DefaultListModel<String> model = (DefaultListModel<String>) listSousCat.getModel();
            model.addElement(textSousCat.getText());
            libSousCat.setVisible(true);
            scrollList.setVisible(true);
        }

    }//GEN-LAST:event_btAjoutSousCatActionPerformed

//Supprimer une sous-catégorie
    private void btSuppSousCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSuppSousCatActionPerformed
        int choix;
        DefaultListModel<String> model = (DefaultListModel<String>) listSousCat.getModel();
        choix = listSousCat.getSelectedIndex();
        model.remove(choix);

    }//GEN-LAST:event_btSuppSousCatActionPerformed

//Handler de synchronisation
    private void synchroniser(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_synchroniser
        String L, P, Q, C, SC = " ";
        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
        L = (String) model.getValueAt(jTable.getSelectedRow(), 0);
        textLib.setText(L);
        C = (String) model.getValueAt(jTable.getSelectedRow(), 1);
        cbCat.setSelectedItem(C);
        SC = (String) model.getValueAt(jTable.getSelectedRow(), 2);
        listSousCat.setSelectedValue(SC, rootPaneCheckingEnabled);
        P = (String) model.getValueAt(jTable.getSelectedRow(), 3);
        textPrix.setText(P);
        Q = (String) model.getValueAt(jTable.getSelectedRow(), 4);
        textQuant.setText(Q);

    }//GEN-LAST:event_synchroniser

//Bouton Modifier
    private void btModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModifActionPerformed
        if (jTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Aucune ligne n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
        } else {
            String Lib;
            String C = "";
            String SC = "Pas de sous catégorie";
            String Px;
            String Q;
            if (cbCat.getSelectedIndex() == 0) {
                C = "Disque Dur";
                if (!disqueDur.isEmpty()) {
                    if (listSousCat.getSelectedValue() == null) {
                        JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        SC = listSousCat.getSelectedValue();
                    }
                }
            }
            if (cbCat.getSelectedIndex() == 1) {
                C = "Souris";
                if (!souris.isEmpty()) {
                    if (listSousCat.getSelectedValue() == null) {
                        JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        SC = listSousCat.getSelectedValue();
                    }
                }
            }
            if (cbCat.getSelectedIndex() == 2) {
                C = "Lecteur DVD";
                if (!lecteurDVD.isEmpty()) {
                    if (listSousCat.getSelectedValue() == null) {
                        JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        SC = listSousCat.getSelectedValue();
                    }
                }
            }
            if (cbCat.getSelectedIndex() == 3) {
                C = "Casque Audio";
                if (!casqueAudio.isEmpty()) {
                    if (listSousCat.getSelectedValue() == null) {
                        JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        SC = listSousCat.getSelectedValue();
                    };
                }
            }
            if (cbCat.getSelectedIndex() == 4) {
                C = "Appareil Photo";
                if (!appPhoto.isEmpty()) {
                    if (listSousCat.getSelectedValue() == null) {
                        JOptionPane.showMessageDialog(this, "Aucune sous-catégorie n'a été sélectionnée", "Erreur de sélection", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        SC = listSousCat.getSelectedValue();
                    }
                }
            }
            Lib = textLib.getText();
            Px = textPrix.getText();
            Q = textQuant.getText();
            String regex = "[0-9]*";
            if (Lib.equals("")) { //libellé vide
                JOptionPane.showMessageDialog(this, "Le libellé est vide", "Erreur de saisie", JOptionPane.INFORMATION_MESSAGE);
            } else if (!Px.matches(regex) || Px.equals("")) { // si prix vide, non numérique 
                JOptionPane.showMessageDialog(this, "Le prix est vide ou erroné", "Erreur de saisie", JOptionPane.INFORMATION_MESSAGE);
            } else if (!Q.matches(regex) || Q.equals("")) { // si prix vide, non numérique 
                JOptionPane.showMessageDialog(this, "La quantité est vide ou erronée", "Erreur de saisie", JOptionPane.INFORMATION_MESSAGE);
            } else {
                DefaultTableModel model = (DefaultTableModel) jTable.getModel();
                model.setValueAt(Lib, jTable.getSelectedRow(), 0);
                model.setValueAt(C, jTable.getSelectedRow(), 1);
                model.setValueAt(SC, jTable.getSelectedRow(), 2);
                model.setValueAt(Px, jTable.getSelectedRow(), 3);
                model.setValueAt(Q, jTable.getSelectedRow(), 4);
            }
        }
    }//GEN-LAST:event_btModifActionPerformed

//Bouton ToolBox Aide    
    private void btAideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAideActionPerformed
        JOptionPane.showInputDialog(this, "Quelle est votre question ?", "Aide", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btAideActionPerformed

//Bouton ToolBox A Propos   
    private void btAProposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAProposActionPerformed
        JOptionPane.showMessageDialog(this, "Gestion de produits version 1.0 \n Béatrice Rollet", "Version 1.0", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btAProposActionPerformed

    private void miExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExportActionPerformed
        try {
            File fichier = this.choisirFichier();
            exporterExcel(jTable, fichier);
        } catch (IOException ex) {
            Logger.getLogger(fenProduits.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miExportActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int input = JOptionPane.showConfirmDialog(this, "Voulez vous quitter l'application ?", "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (input == JOptionPane.OK_OPTION) {
            System.out.println("Application Fermée");
            this.dispose();
            System.exit(0);
        } else if (input == JOptionPane.CANCEL_OPTION) {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        }
    }

    static class ConfirmDialogInFrame extends JFrame {

        public ConfirmDialogInFrame() {
            setTitle("Quitter?");
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            setVisible(true);
            setResizable(false);
            setSize(400, 300);
            getContentPane().setLayout(null);
        }
    }//GEN-LAST:event_formWindowClosing

    private void btAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAfficherActionPerformed
//            DefaultListModel model = (DefaultListModel) listSousCat.getModel();
//            int taille = model.getSize();
//            String souscat = "";
//            if (taille > 0) {
//                for (int i = 0; i < taille; i++) {
//                    souscat = souscat + model.getElementAt(i) + "\n";
//                }
//                JOptionPane.showMessageDialog(null, "Sous-catégories :\n" + souscat, "Affichage des sous-catégories", JOptionPane.INFORMATION_MESSAGE);
//            } else {
//                JOptionPane.showMessageDialog(null, "Aucun élément de sous catégorie dans cette catégorie", "Affichage sous catégorie", JOptionPane.INFORMATION_MESSAGE);
//            }
//            
    }//GEN-LAST:event_btAfficherActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fenProduits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fenProduits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fenProduits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fenProduits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fenProduits().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAPropos;
    private javax.swing.JButton btAfficher;
    private javax.swing.JButton btAide;
    private javax.swing.JButton btAjout;
    private javax.swing.JButton btAjoutSousCat;
    private javax.swing.JButton btModif;
    private javax.swing.JButton btSon1;
    private javax.swing.JButton btSon2;
    private javax.swing.JButton btSuppSousCat;
    private javax.swing.JButton btSuppr;
    private javax.swing.JComboBox<String> cbCat;
    private javax.swing.JTable jTable;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel libCat;
    private javax.swing.JLabel libLib;
    private javax.swing.JLabel libPrix;
    private javax.swing.JLabel libQuant;
    private javax.swing.JLabel libSousCat;
    private javax.swing.JList<String> listSousCat;
    private javax.swing.JMenu mFichier;
    private javax.swing.JMenuBar mbMenu;
    private javax.swing.JMenuItem miExport;
    private javax.swing.JMenuItem miQuitter;
    private javax.swing.JPanel panCarac;
    private javax.swing.JScrollPane scrollList;
    private javax.swing.JScrollPane scrollTable;
    private javax.swing.JTextField textLib;
    private javax.swing.JTextField textPrix;
    private javax.swing.JTextField textQuant;
    private javax.swing.JTextField textSousCat;
    // End of variables declaration//GEN-END:variables

    private File choisirFichier() {
        FileDialog fd = new FileDialog(this, "Choose a file", FileDialog.LOAD);
        fd.setDirectory("C:\\");
        fd.setFile("*.xls");
        fd.setVisible(true);
        String filename = fd.getFile();
        File fichier = new File(fd.getDirectory() + filename);
        return fichier;
    }

    private void exporterExcel(JTable jTable, File fichier) throws IOException {
        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
        FileOutputStream fos = new FileOutputStream(fichier);
        Writer excel = new OutputStreamWriter(fos, "UTF-32");

        for (int i = 0; i < model.getColumnCount(); i++) {
            excel.write(model.getColumnName(i) + "\t");
        }
        excel.write("\n");
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < model.getColumnCount(); j++) {
                excel.write(model.getValueAt(i, j) + "\t");

            }
            excel.write("\n");
        }
        excel.close();
        Desktop.getDesktop().open(fichier);
    }
}
